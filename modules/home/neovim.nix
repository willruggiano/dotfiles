{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.neovim;
  treesitterGrammars = with pkgs; tree-sitter.withPlugins (_: tree-sitter.allGrammars);
in
{
  config = mkIf cfg.enable {
    programs.neovim = {
      package = pkgs.neovim;

      withNodeJs = true;
      withRuby = true;
      withPython3 = true;

      extraPython3Packages = ps: with ps; [ pynvim ];
      extraPackages = with pkgs; with luajitPackages; [
        clang-tools-unbroken
        cmake-language-server
        luacheck
        rnix-lsp
        tree-sitter
      ] ++ lib.optionals (!stdenv.isDarwin) [
        # These don't work on macOS yet :(
        python39Packages.python-lsp-server
        sumneko-lua-language-server
      ];

      extraConfig = ''
        lua require "bombadil"
      '';

      # NOTE: Here we specify some plugins which require special handling, e.g. building shared libraries
      plugins = with pkgs.vimPlugins; [ cpsm ];
    };

    home.sessionVariables = {
      EDITOR = "nvim";
      MANPAGER = "nvim +Man!";
    };

    xdg.configFile = {
      nvim = {
        source = ../../.config/nvim;
        recursive = true;
      };

      "zsh/extra/31-nvim-aliases.zsh".text = ''
        if (( ''${+NVIM_LISTEN_ADDRESS} )); then
          alias open="${pkgs.neovim-remote}/bin/nvr -cc quit"
          alias split="${pkgs.neovim-remote}/bin/nvr -cc quit -o"
          alias vsplit="${pkgs.neovim-remote}/bin/nvr -cc quit -O"
        fi
      '';
    };

    xdg.dataFile = {
      # TODO: This would be more ideal than relying on Nix to generate an init.vim for us.
      # But it seems we'd have to NOT use home-manager, or at least not programs.neovim.
      "nvim/site/pack/nix/start/nix/lua/bombadil/generated/init.lua".text =
        let
          inherit (pkgs.vimUtils) packDir;
          # NOTE: Just an example. If I ever pursue this further I'll switch to `map`ing on config.programs.neovim.plugins
          plugins = { cpsm = { start = [ pkgs.vimPlugins.cpsm ]; }; };
        in
        ''
          -- Generated by Nix
          -- Experimental. Not intended for actual use.
          print(package.path)
          print(vim.o.runtimepath)

          local packpath = "${packDir plugins}"
          print(packpath)
        '';
      "nvim/site/pack/nix/start/nix/lua/bombadil/generated/sumneko.lua".text =
        with pkgs;
        if stdenv.isDarwin
        then
          ''
            -- Generated by Nix
            local exe = vim.fn.expand "~/src/lua-language-server/bin/macOS/lua-language-server"
            local main = vim.fn.expand "~/src/lua-language-server/bin/macOS/main.lua"
            return { exe, main }
          ''
        else
          ''
            -- Generated by Nix
            -- NOTE: This command is a wrapper that includes the -E /path/to/main.lua
            local exe = "${sumneko-lua-language-server}/bin/lua-language-server"
            return { exe }
          '';
      "nvim/site/parser" = {
        source = treesitterGrammars;
        recursive = true;
      };
    };
  };
}
