{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.programs.neovim;
in {
  config = mkIf cfg.enable {
    user.packages = [pkgs.neovim-custom];

    home.configFile = let
      plugins = import ./plugins {inherit lib pkgs;};
      inherit (pkgs.vimUtils) buildVimPluginFrom2Nix toVimPlugin;
      inherit (pkgs.luajitPackages) luarocksMoveDataFolder;
      lualib = pkgs.luajitPackages.lib;

      mkPlugin = name: p:
        buildVimPluginFrom2Nix ({
          inherit name;
          src = p.package;
        }
        // (p.override or {}));
      buildNeovimPlugin = originalLuaDrv: let
        luaDrv = lualib.overrideLuarocks originalLuaDrv (drv: {
          extraConfig = ''
            lua_modules_path = "lua"
          '';
        });
      in
        toVimPlugin (luaDrv.overrideAttrs (oa: {
          nativeBuildInputs = oa.nativeBuildInputs or [] ++ [luarocksMoveDataFolder];
        }));

      # TODO: Find a better way to deal with rocks which have lua modules
      # It would be nice for *each* plugin to be its own little Lua env (via buildEnv)
      # and then only expose the lua bits from the primary package.
      # This would make it easy to specify rocks and additional dependencies, while also
      # keeping those guys hidden from the rest of the system. We'd really be creating little sandboxed envs for every plugin.
      plugins' = mapAttrs (pname: p: {start = [(mkPlugin pname p)];}) plugins;
      rocks = flatten (mapAttrsToList (pname: p: p.rocks or []) plugins);
      rocksL =
        map (p: {
          name = p.pname;
          value = p;
        })
        rocks;
      rocksA = listToAttrs rocksL;
      rocks' = mapAttrs (_: p: {start = [(buildNeovimPlugin p)];}) rocksA;
    in {
      nvim = {
        source = ../../../.config/nvim;
        recursive = true;
      };

      "nvim/init.lua".text = let
        luaEnv = pkgs.buildEnv {
          name = "neovim-lua-env";
          paths =
            rocks
            ++ (with pkgs.luajitPackages; [
              luautf8
            ]);
        };

        nodejsEnv = pkgs.buildEnv {
          name = "neovim-nodejs-env";
          paths = with pkgs.nodePackages; [neovim];
        };

        runtimeEnv = pkgs.buildEnv {
          name = "neovim-runtime-env";
          paths = with pkgs.vimUtils; [(packDir plugins') (packDir rocks')];
        };

        pythonEnv = pkgs.buildEnv {
          name = "neovim-python-env";
          paths = with pkgs; [
            (python3.withPackages (ps: with ps; [pynvim]))
          ];
        };
      in ''
        -- Generated by Nix
        vim.cmd "set packpath^=${runtimeEnv}"
        package.cpath = "${luaEnv}/lib/lua/5.1/?.so" .. ";" .. package.cpath
        vim.cmd "set runtimepath^=${runtimeEnv}"

        vim.g.node_host_prog = "${nodejsEnv}/bin/neovim-node-host"
        vim.g.python3_host_prog = "${pythonEnv}/bin/python3"

        require "bombadil"
      '';

      "nvim/plugin/00-setup-plugins.lua".text = let
        preloadConfigs =
          [
            ''
              local impatient = require "impatient"
              impatient.enable_profile()
            ''
          ]
          ++ flatten (mapAttrsToList (pname: p: optionals (p ? "setup") ["-- ${pname}" p.setup]) plugins);
      in
        concatStringsSep "\n" preloadConfigs;

      "nvim/plugin/01-configure-plugins.lua".text = let
        pluginConfigs = flatten (mapAttrsToList (pname: p: optionals (p ? "config") ["-- ${pname}" p.config]) plugins);
      in
        concatStringsSep "\n" pluginConfigs;

      "zsh/extra/19-neovim.zsh".text = ''
        if (( ''${+NVIM_LISTEN_ADDRESS} )); then
          export MANPAGER="${pkgs.neovim-remote}/bin/nvr -c 'Man!' -o -"
          alias open="${pkgs.neovim-remote}/bin/nvr -cc quit"
          alias split="${pkgs.neovim-remote}/bin/nvr -cc quit -o"
          alias vsplit="${pkgs.neovim-remote}/bin/nvr -cc quit -O"
        fi
      '';
    };

    home.dataFile = {
      # TODO: It'd be nice to generate this automatically too
      # "nvim/rplugin.vim".text = ''
      #   " Generated by Nix

      #   " python plugins
      #   call remote#host#RegisterPlugin('python3', '${vimplugin-wilder}/rplugin/python3/wilder', [
      #       \ {'sync': v:true, 'name': '_wilder_python_basic_highlight', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_clap_filt', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_cpsm_filt', 'type': 'function', 'opts': {}},
      #       \ {'sync': v:true, 'name': '_wilder_python_cpsm_highlight', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_difflib_sort', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_file_finder', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_fruzzy_filt', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_fuzzy_filt', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_fuzzywuzzy_sort', 'type': 'function', 'opts': {}},
      #       \ {'sync': v:true, 'name': '_wilder_python_get_file_completion', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_get_help_tags', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_get_users', 'type': 'function', 'opts': {}},
      #       \ {'sync': v:true, 'name': '_wilder_init', 'type': 'function', 'opts': {}},
      #       \ {'sync': v:true, 'name': '_wilder_python_pcre2_highlight', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_search', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_sleep', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_lexical_sort', 'type': 'function', 'opts': {}},
      #       \ {'sync': 'urgent', 'name': '_wilder_python_uniq_filt', 'type': 'function', 'opts': {}},
      #     \ ])
      # '';

      "nvim/site/pack/nix/start/nix/lua/bombadil/generated/lsp.lua".text = with pkgs; let
        cppEnv = buildEnv {
          name = "neovim-cpp-env";
          paths = [clang-tools_14 cmake-language-server];
        };

        luaEnv = buildEnv {
          name = "neovim-lua-env";
          paths = with luajitPackages; [luacheck] ++ lib.optional stdenv.isLinux sumneko-lua-language-server;
        };

        nixEnv = buildEnv {
          name = "neovim-nix-env";
          paths = [rnix-lsp];
        };

        pythonEnv = buildEnv {
          name = "neovim-python-env";
          paths = [
            (python3.withPackages (ps: with ps; [python-lsp-server pylsp-rope]))
          ];
        };

        zigEnv = buildEnv {
          name = "neovim-zig-env";
          paths = with pkgs; [zls];
        };
      in
        concatStringsSep "\n" ([
          "-- Generated by Nix"
          ''local clangd = { "${cppEnv}/bin/clangd" }''
          ''local clang_format = { "${cppEnv}/bin/clang-format" }''
          ''local cmake = { "${cppEnv}/bin/cmake-language-server" }''
          ''local luacheck = { "${luaEnv}/bin/luacheck" }''
          ''local rnix = { "${nixEnv}/bin/rnix-lsp" }''
          ''local pylsp = { "${pythonEnv}/bin/pylsp" }''
          ''local zls = { "${zigEnv}/bin/zls" }''
        ]
        ++ optional stdenv.isDarwin ''
          local sumneko = {
            vim.fn.expand "~/src/lua-language-server/bin/macOS/lua-language-server",
            vim.fn.expand "~/src/lua-language-server/bin/macOS/main.lua"
          }
        ''
        ++ optional stdenv.isLinux ''
          local sumneko = { "${luaEnv}/bin/lua-language-server" }
        ''
        ++ [
          ''
            return {
              clangd = clangd,
              ["clang-format"] = clang_format,
              cmake = cmake,
              luacheck = luacheck,
              pylsp = pylsp,
              rnix = rnix,
              sumneko = sumneko,
              zls = zls,
            }
          ''
        ]);

      "nvim/site/pack/nix/start/nix/lua/bombadil/generated/exe.lua".text = with pkgs;
        concatStringsSep "\n" ([
          "-- Generated by Nix"
          ''
            local dasht = {
              query_line = "${dasht}/bin/dasht-query-line",
            }
          ''
        ]
        ++ [
          ''
            return {
              dasht = dasht,
          ''
        ]
        ++ optional stdenv.isLinux ''
          elinks = "${elinks}/bin/elinks",
        ''
        ++ [
          ''
            }
          ''
        ]);
    };

    environment.variables.EDITOR = "nvim";
    environment.variables.MANPAGER = "nvim +Man!";
  };
}
