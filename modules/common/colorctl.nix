{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.programs.colorctl;
in {
  options.programs.colorctl = {
    enable = mkEnableOption "Enable colorctl";
    settings = mkOption {
      description = "Attribute set of application specific configuration";
      default = {};
      type = types.attrsOf (types.submodule ({
        name,
        config,
        ...
      }: {
        options = {
          reload = mkEnableOption "Enable reload for application";
          reload-command = mkOption {
            type = types.str;
            default = "";
            description = "Command to run to reload application";
          };
        };
      }));
    };
  };

  config = let
    inherit (cfg) settings;

    toTomlSection = name: attrs:
      concatStringsSep "\n" ([
          "[${name}]"
        ]
        ++ (mapAttrsToList (key: value: "${key} = ${builtins.toJSON value}") attrs));
    tomlSections = mapAttrsToList toTomlSection settings;
    configToml = concatStringsSep "\n" (["# Generated by Nix."] ++ tomlSections);

    toReloadConfigLinux = name: attrs: {
      systemd.user.services."apply-${name}-theme" = {
        description = "Re-apply ${name} theme";
        path = with pkgs; [colorctl];
        script = "colorctl build --reload ${name}";
        wantedBy = ["sleep.target"];
      };

      systemd.user.timers."apply-${name}-theme" = {
        description = "Re-apply ${name} theme";
        partOf = ["apply-${name}-theme.service"];
        wantedBy = ["timers.target"];
        timerConfig.OnCalendar = "hourly";
      };
    };
    toReloadConfigDarwin = name: attrs: {
      # TODO: launchd
    };
    toReloadConfig =
      if pkgs.isLinux
      then toReloadConfigLinux
      else toReloadConfigDarwin;
  in
    mkIf cfg.enable (
      mkMerge (
        [
          {
            user.packages = with pkgs; [colorctl];

            home.configFile = {
              "colorctl/config.toml".text = configToml;
            };
          }
        ]
        # TODO: This doesn't work -> infinite recursion :(
        # ++ (mapAttrsToList toReloadConfig cfg.settings))
      )
    );
}
