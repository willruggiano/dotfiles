{
  config,
  lib,
  pkgs,
  ...
}:
with lib; let
  cfg = config.programs.xplr;
in {
  options.programs.xplr = {
    enable = mkEnableOption "xplr";
  };

  config = mkIf cfg.enable {
    user.packages = with pkgs; [xplr];

    home.configFile = let
      fzf-xplr = pkgs.stdenv.mkDerivation {
        name = "fzf-xplr";
        src = pkgs.fetchFromGitHub {
          owner = "sayanarijit";
          repo = "fzf.xplr";
          rev = "5373cee9d2716f774d593af67812f8b4c0ccced8";
          hash = "sha256-MQALJ6xn+c3oIuFlrzcCzdoSTwqgZKwQ/kUyJ7lQLLA=";
        };

        dontConfigure = true;
        dontBuild = true;
        dontFixup = true;

        installPhase = ''
          mkdir -p $out/lua/fzf
          cp init.lua $out/lua/fzf/init.lua
        '';
      };

      icons-xplr = pkgs.stdenv.mkDerivation {
        name = "icons-xplr";
        src = pkgs.fetchFromGitHub {
          owner = "prncss-xyz";
          repo = "icons.xplr";
          rev = "6133ea79c41629591c72fa4c51132f7a3cb30782";
          hash = "sha256-RqSHqLVLZ0hrP6RLHgNtReoy6pW/nzxestwLdugFro0=";
        };

        dontConfigure = true;
        dontBuild = true;
        dontFixup = true;

        installPhase = ''
          mkdir -p $out/lua/icons
          cp init.lua $out/lua/icons/init.lua
        '';
      };

      runtimeEnv = pkgs.buildEnv {
        name = "xplr-runtime-env";
        paths = [fzf-xplr icons-xplr];
      };
    in {
      xplr = {
        source = ../../../.config/xplr;
        recursive = true;
      };

      "xplr/init.lua".text = ''
        -- Generated by Nix
        version = "${pkgs.xplr.version}"

        local home = os.getenv "HOME"
        package.path = "${runtimeEnv}/lua/?/init.lua;" .. home .. "/.config/xplr/?/init.lua;;"

        require "plugins"
      '';
    };
  };
}
